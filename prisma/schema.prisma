// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brands {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  brandName String @db.VarChar(50)
  BrandImg String @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  products products[]
}

model categories {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  categoryName String @db.VarChar(50)
  categoryImg String @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  products products[]
}

model products {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  title String @db.VarChar(200)
  short_des String @db.VarChar(255)
  price String @db.VarChar(50)
  discount Boolean
  discount_price String @db.VarChar(50)
  image String @db.VarChar(255)
  stock Boolean
  star Float
  remark products_remark
  category_id BigInt @db.UnsignedBigInt
  brand_id BigInt @db.UnsignedBigInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  brands brands @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categories categories @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  product_details product_details?
  product_sliders product_sliders?
  product_wishes product_wishes[]
  product_carts product_carts[]
  product_reviews product_reviews[]
  invoice_products invoice_products[]
}

model product_details {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  img1 String @db.VarChar(255)
  img2 String @db.VarChar(255)
  img3 String @db.VarChar(255)
  img4 String @db.VarChar(255)
  des String @db.LongText
  color String @db.VarChar(50)
  size String @db.VarChar(50)
  product_id BigInt @unique @db.UnsignedBigInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  products products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_sliders {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  title String @db.VarChar(200)
  short_des String @db.VarChar(255)
  price String @db.VarChar(50)
  image String @db.VarChar(255)
  product_id BigInt @unique @db.UnsignedBigInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  products products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model users {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  email String @unique @db.VarChar(50)
  otp String @db.VarChar(10)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  customer_profiles customer_profiles?
  product_wishes product_wishes[]
  product_carts product_carts[]
  invoices invoices[]
  invoice_products invoice_products[]
}

model customer_profiles {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  cus_name String @db.VarChar(50)
  cus_add String @db.VarChar(255)
  cus_city String @db.VarChar(50)
  cus_state String @db.VarChar(50)
  cus_postcode String @db.VarChar(50)
  cus_country String @db.VarChar(50)
  cus_phone String @db.VarChar(50)
  cus_fax String @db.VarChar(50)
  ship_name String @db.VarChar(50)
  ship_add String @db.VarChar(255)
  ship_city String @db.VarChar(50)
  ship_state String @db.VarChar(50)
  ship_postcode String @db.VarChar(50)
  ship_country String @db.VarChar(50)
  ship_phone String @db.VarChar(50)
  user_id BigInt @unique @db.UnsignedBigInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  users users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  product_reviews product_reviews[]
}

model product_wishes {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt @db.UnsignedBigInt
  user_id BigInt @db.UnsignedBigInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  products products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_carts {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  user_id BigInt @db.UnsignedBigInt
  product_id BigInt @db.UnsignedBigInt
  color String @db.VarChar(50)
  size String @db.VarChar(50)
  qty String @db.VarChar(50)
  price String @db.VarChar(50)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  products products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_reviews {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  description String @db.LongText
  rating String @db.VarChar(50)
  customer_id BigInt @db.UnsignedBigInt
  product_id BigInt @db.UnsignedBigInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  products products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  customer_profiles customer_profiles @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model sslcommerz_accounts {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  store_id String @db.VarChar(255)
  store_passwd String @db.VarChar(255)
  currency String @db.VarChar(50)
  success_url String @db.VarChar(255)
  fail_url String @db.VarChar(255)
  cancel_url String @db.VarChar(255)
  ipn_url String @db.VarChar(255)
  init_url String @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model policies {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  type policies_type
  des String @db.LongText
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model invoices {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  total String @db.VarChar(50)
  vat String @db.VarChar(50)
  payable String @db.VarChar(50)
  cus_details String @db.LongText
  ship_details String @db.LongText
  tran_id String @db.VarChar(50)
  val_id String @default("0") @db.VarChar(50)
  delivery_status invoices_delivery_status
  payment_status String @db.VarChar(255)
  user_id BigInt @db.UnsignedBigInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  users users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  invoice_products invoice_products[]
}

model invoice_products {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  invoice_id BigInt @db.UnsignedBigInt
  product_id BigInt @db.UnsignedBigInt
  user_id BigInt @db.UnsignedBigInt
  qty String @db.VarChar(50)
  sale_price String @db.VarChar(50)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  invoices invoices @relation(fields: [invoice_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

enum invoices_delivery_status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum policies_type {
  ABOUT
  REFUND
  TERMS
  HOW_TO_BUY
  CONTACT
  COMPLAIN
}

enum products_remark {
  POPULAR
  NEW
  TOP
  SPECIAL
  HOT
  SALE
  TRENDING
}